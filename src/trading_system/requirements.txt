# ML Trading System セットアップ

## requirements.txt
```
flask==2.3.3
pandas==2.0.3
numpy==1.24.3
scikit-learn==1.3.0
tensorflow==2.13.0
keras==2.13.1
TA-Lib==0.4.27
joblib==1.3.2
requests==2.31.0
pytz==2023.3
```

## セットアップ手順

### 1. Python環境セットアップ
```bash
# 仮想環境作成
python -m venv ml_trading_env

# 仮想環境アクティベート (Windows)
ml_trading_env\Scripts\activate

# 仮想環境アクティベート (Linux/Mac)
source ml_trading_env/bin/activate

# 依存関係インストール
pip install -r requirements.txt

# TA-Lib のインストール (Windows の場合)
# 1. https://www.lfd.uci.edu/~gohlke/pythonlibs/#ta-lib から whl ファイルダウンロード
# 2. pip install TA_Lib-0.4.27-cp39-cp39-win_amd64.whl (Python バージョンに応じて変更)
```

### 2. ファイル構成
```
trading_system/
├── ml_trading_system.py      # メイン機械学習システム
├── flask_trading_api.py      # Flask API サーバー
├── requirements.txt          # Python 依存関係
├── AccountManager.mqh        # MQL5 アカウント管理ライブラリ
└── MLTradingEA.mq5          # MQL5 EA
```

### 3. システム起動手順

#### Step 1: Flask API サーバー起動
```bash
cd trading_system
python flask_trading_api.py
```

#### Step 2: MQL5 セットアップ
1. `AccountManager.mqh` を `MQL5/Include/` フォルダに配置
2. `MLTradingEA.mq5` を `MQL5/Experts/` フォルダに配置
3. MetaEditor でコンパイル
4. MT5 で EA を適用

#### Step 3: WebRequest 許可設定
MT5 で以下を設定：
1. ツール → オプション → エキスパートアドバイザー
2. 「WebRequest を次の URL に許可する」にチェック
3. `http://localhost:5000` を追加

### 4. 動作確認

#### API テスト
```bash
# ヘルスチェック
curl http://localhost:5000/health

# 手動でテストデータ送信
curl -X POST http://localhost:5000/tick \
  -H "Content-Type: application/json" \
  -d '{"datetime":"2024-01-01T10:00:00","open":1.1000,"high":1.1010,"low":1.0990,"close":1.1005,"volume":100}'

# シグナル取得
curl http://localhost:5000/signal
```

#### EA パラメータ設定例
- API_URL: `http://localhost:5000`
- SendDataInterval: `10` (秒)
- MinConfidence: `0.7`
- UseAccountManager: `true`

### 5. 監視とログ

#### ログファイル
- `trading_api.log` - API サーバーログ
- MT5 エキスパートタブ - EA 動作ログ

#### 重要な監視ポイント
1. API サーバーの稼働状況
2. データ受信の継続性
3. モデルの予測精度
4. 取引シグナルの妥当性
5. アカウント管理の動作

### 6. トラブルシューティング

#### よくある問題と解決法

**1. TA-Lib インストールエラー**
- Windows: 事前コンパイル済み wheel ファイルを使用
- Linux: `sudo apt-get install ta-lib` 実行後に pip install

**2. TensorFlow インストールエラー**
- Python 3.8-3.11 を使用
- Visual Studio Build Tools (Windows)

**3. API 接続エラー**
- ファイアウォール設定確認
- MT5 WebRequest 許可設定確認
- localhost vs 127.0.0.1 の違いを確認

**4. モデル訓練データ不足**
- 最低 500 データポイント必要
- 十分な履歴データを蓄積してから運用開始

### 7. 本番運用での推奨設定

#### セキュリティ
- API キー認証の追加
- HTTPS 通信の実装
- アクセス制限の設定

#### パフォーマンス
- Redis によるデータキャッシュ
- GPU による高速推論
- 分散処理の実装

#### 監視
- Prometheus + Grafana による監視
- アラート通知の設定
- 取引パフォーマンスの記録

### 8. カスタマイズポイント

#### 機械学習モデル
- 追加の特徴量エンジニアリング
- ハイパーパラメータチューニング
- モデルアンサンブルの調整

#### 取引ロジック
- リスク管理ルールの追加
- ポジションサイジングの改良
- 複数通貨ペア対応

#### API 機能
- リアルタイムストリーミング
- バックテスト機能
- ポートフォリオ管理